// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/clients/telegram/telegram.go

// Package mock_telegram is a generated GoMock package.
package mock_telegram

import (
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockBotAPI is a mock of BotAPI interface.
type MockBotAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBotAPIMockRecorder
}

// MockBotAPIMockRecorder is the mock recorder for MockBotAPI.
type MockBotAPIMockRecorder struct {
	mock *MockBotAPI
}

// NewMockBotAPI creates a new mock instance.
func NewMockBotAPI(ctrl *gomock.Controller) *MockBotAPI {
	mock := &MockBotAPI{ctrl: ctrl}
	mock.recorder = &MockBotAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotAPI) EXPECT() *MockBotAPIMockRecorder {
	return m.recorder
}

// BroadcastMsgToUsers mocks base method.
func (m *MockBotAPI) BroadcastMsgToUsers(chatIDs []int64, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMsgToUsers", chatIDs, msg)
}

// BroadcastMsgToUsers indicates an expected call of BroadcastMsgToUsers.
func (mr *MockBotAPIMockRecorder) BroadcastMsgToUsers(chatIDs, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMsgToUsers", reflect.TypeOf((*MockBotAPI)(nil).BroadcastMsgToUsers), chatIDs, msg)
}

// GetUpdatesChan mocks base method.
func (m *MockBotAPI) GetUpdatesChan() tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan")
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan.
func (mr *MockBotAPIMockRecorder) GetUpdatesChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockBotAPI)(nil).GetUpdatesChan))
}

// SendMsg mocks base method.
func (m *MockBotAPI) SendMsg(chatID int64, msg string, messageToReplyID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", chatID, msg, messageToReplyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBotAPIMockRecorder) SendMsg(chatID, msg, messageToReplyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBotAPI)(nil).SendMsg), chatID, msg, messageToReplyID)
}
