// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/cmd/getter/cmd_getter.go

// Package mock_getter is a generated GoMock package.
package mock_getter

import (
	reflect "reflect"
	cmd "tdl/internal/handlers/cmd"

	gomock "github.com/golang/mock/gomock"
)

// MockCmdGetter is a mock of CmdGetter interface.
type MockCmdGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCmdGetterMockRecorder
}

// MockCmdGetterMockRecorder is the mock recorder for MockCmdGetter.
type MockCmdGetterMockRecorder struct {
	mock *MockCmdGetter
}

// NewMockCmdGetter creates a new mock instance.
func NewMockCmdGetter(ctrl *gomock.Controller) *MockCmdGetter {
	mock := &MockCmdGetter{ctrl: ctrl}
	mock.recorder = &MockCmdGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdGetter) EXPECT() *MockCmdGetterMockRecorder {
	return m.recorder
}

// GetCmdAndArgsFromMessage mocks base method.
func (m *MockCmdGetter) GetCmdAndArgsFromMessage(message string) (cmd.CmdHandler, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCmdAndArgsFromMessage", message)
	ret0, _ := ret[0].(cmd.CmdHandler)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// GetCmdAndArgsFromMessage indicates an expected call of GetCmdAndArgsFromMessage.
func (mr *MockCmdGetterMockRecorder) GetCmdAndArgsFromMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCmdAndArgsFromMessage", reflect.TypeOf((*MockCmdGetter)(nil).GetCmdAndArgsFromMessage), message)
}
