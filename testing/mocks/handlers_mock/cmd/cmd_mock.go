// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/cmd/cmd.go

// Package mock_cmd is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"
	cmd "tdl/internal/handlers/cmd"

	gomock "github.com/golang/mock/gomock"
)

// MockCmdHandler is a mock of CmdHandler interface.
type MockCmdHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCmdHandlerMockRecorder
}

// MockCmdHandlerMockRecorder is the mock recorder for MockCmdHandler.
type MockCmdHandlerMockRecorder struct {
	mock *MockCmdHandler
}

// NewMockCmdHandler creates a new mock instance.
func NewMockCmdHandler(ctrl *gomock.Controller) *MockCmdHandler {
	mock := &MockCmdHandler{ctrl: ctrl}
	mock.recorder = &MockCmdHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdHandler) EXPECT() *MockCmdHandlerMockRecorder {
	return m.recorder
}

// HandleCmd mocks base method.
func (m *MockCmdHandler) HandleCmd(ctx context.Context, payload cmd.CmdPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCmd", ctx, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCmd indicates an expected call of HandleCmd.
func (mr *MockCmdHandlerMockRecorder) HandleCmd(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCmd", reflect.TypeOf((*MockCmdHandler)(nil).HandleCmd), ctx, payload)
}
