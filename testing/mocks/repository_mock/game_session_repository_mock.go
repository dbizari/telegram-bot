// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/game_session_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	domain "tdl/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockGameSessionRepositoryAPI is a mock of GameSessionRepositoryAPI interface.
type MockGameSessionRepositoryAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGameSessionRepositoryAPIMockRecorder
}

// MockGameSessionRepositoryAPIMockRecorder is the mock recorder for MockGameSessionRepositoryAPI.
type MockGameSessionRepositoryAPIMockRecorder struct {
	mock *MockGameSessionRepositoryAPI
}

// NewMockGameSessionRepositoryAPI creates a new mock instance.
func NewMockGameSessionRepositoryAPI(ctrl *gomock.Controller) *MockGameSessionRepositoryAPI {
	mock := &MockGameSessionRepositoryAPI{ctrl: ctrl}
	mock.recorder = &MockGameSessionRepositoryAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameSessionRepositoryAPI) EXPECT() *MockGameSessionRepositoryAPIMockRecorder {
	return m.recorder
}

// CreateGame mocks base method.
func (m *MockGameSessionRepositoryAPI) CreateGame(ctx context.Context, gameSession *domain.GameSession) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", ctx, gameSession)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockGameSessionRepositoryAPIMockRecorder) CreateGame(ctx, gameSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockGameSessionRepositoryAPI)(nil).CreateGame), ctx, gameSession)
}

// TODO: correjir los mocks estos que son un copy paste.
func (m *MockGameSessionRepositoryAPI) AddPlayer(ctx context.Context, sessionId string ,userInfo *domain.UserInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addPLayer", ctx, sessionId,userInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}


func (mr *MockGameSessionRepositoryAPIMockRecorder) AddPlayer(ctx, gameSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockGameSessionRepositoryAPI)(nil).CreateGame), ctx, gameSession)
}
